[{"/home/ed/code/jababira/src/index.tsx":"1","/home/ed/code/jababira/src/reportWebVitals.js":"2","/home/ed/code/jababira/src/App.tsx":"3","/home/ed/code/jababira/src/components/NewPlayer.tsx":"4","/home/ed/code/jababira/src/generated/types.tsx":"5","/home/ed/code/jababira/src/components/AttributeSelector.tsx":"6","/home/ed/code/jababira/src/setupApollo.ts":"7","/home/ed/code/jababira/src/components/PlayerList.tsx":"8","/home/ed/code/jababira/src/models/Player.ts":"9","/home/ed/code/jababira/src/components/SquadMaker.tsx":"10","/home/ed/code/jababira/src/components/Team.tsx":"11","/home/ed/code/jababira/src/components/MatchMaker.tsx":"12","/home/ed/code/jababira/src/components/Card.tsx":"13","/home/ed/code/jababira/src/components/PlayerPicker.tsx":"14","/home/ed/code/jababira/src/components/Slider.tsx":"15"},{"size":654,"mtime":1611155472981,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1611081720670,"results":"18","hashOfConfig":"17"},{"size":3520,"mtime":1613022397191,"results":"19","hashOfConfig":"17"},{"size":5189,"mtime":1611198851291,"results":"20","hashOfConfig":"17"},{"size":10429,"mtime":1613024561549,"results":"21","hashOfConfig":"17"},{"size":642,"mtime":1611187300536,"results":"22","hashOfConfig":"17"},{"size":564,"mtime":1611155506901,"results":"23","hashOfConfig":"17"},{"size":654,"mtime":1611201192059,"results":"24","hashOfConfig":"17"},{"size":132,"mtime":1611183523423,"results":"25","hashOfConfig":"17"},{"size":6037,"mtime":1613025683388,"results":"26","hashOfConfig":"17"},{"size":1556,"mtime":1611200504812,"results":"27","hashOfConfig":"17"},{"size":2972,"mtime":1613021447988,"results":"28","hashOfConfig":"17"},{"size":435,"mtime":1612686974551,"results":"29","hashOfConfig":"17"},{"size":797,"mtime":1613024936827,"results":"30","hashOfConfig":"17"},{"size":436,"mtime":1613026536272,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"ktdsvd",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"34"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"34"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/ed/code/jababira/src/index.tsx",[],["68","69"],"/home/ed/code/jababira/src/reportWebVitals.js",[],["70","71"],"/home/ed/code/jababira/src/App.tsx",["72"],"import './App.css';\nimport React, { useEffect, useState } from 'react';\nimport { PlayerEditor } from './components/NewPlayer';\nimport { Player, Position, useGetLookupsQuery, useGetPlayersQuery } from './generated/types';\nimport { PlayerList } from './components/PlayerList';\nimport { MatchMaker } from './components/MatchMaker';\nimport { Card } from './components/Card';\n\nexport type PlayerFull = Player & { isFree:boolean }   \n\nexport const App = () => {\n\n  const positions = [Position.Gk, Position.Def, Position.Mid, Position.Fw] \n  const [isCreatingPlayer, setIsCreatingPlayer] = useState<boolean>(false);\n  const [isMakingTeams, setIsMakingTeams] = useState<boolean>(false);\n  const [showControls, setShowControls] = useState<boolean>(true);\n  const [showNewMatch, setShowNewMatch] = useState<boolean>(false);\n  const [black, setBlack] = useState<Array<Player>>([])\n  const [white, setWhite] = useState<Array<Player>>([])\n  const [player, setPlayer] = useState<Player>();\n  const [allPlayers, setAllPlayers] = useState<Array<PlayerFull>>([])\n  const lookups = useGetLookupsQuery()   \n  const { data } = useGetPlayersQuery() \n  \n  useEffect(() => {\n    if (data && data.players) {\n      const players:Array<PlayerFull> = data.players.map( it => ({...it, isFree:true}))   \n      setAllPlayers(players)\n    }\n  }, [data])\n\n  useEffect(() => {\n    if (player) {\n      setIsCreatingPlayer(true)\n    }\n\n  }, [player])\n\n  const createPlayer = () => {\n    setIsCreatingPlayer(true)\n    setShowControls(false)\n  } \n  const makeTeams =  () => {\n    setIsMakingTeams(true)\n    setShowControls(false)\n  }\n\n  const createMatch = () => {\n    setShowNewMatch(true)\n  } \n\n  const togglePlayer =  (player:PlayerFull) => {\n    if (data && data.players) {\n      const isInBlack = black.find(it => it.id === player.id)  \n      const isInWhite = white.find(it => it.id === player.id)  \n      if (!isInBlack && !isInWhite) {\n        setBlack([...black, player])\n        const _players = allPlayers.filter(it => it.id !== player.id)   \n        player.isFree = false\n        setAllPlayers([..._players, player ])\n      }\n      else if (isInBlack) {\n        setBlack(black.filter(it => it.id !== player.id))\n        setWhite([...white, player])\n      } else {\n        setWhite(white.filter(it => it.id !== player.id))\n        const _players = allPlayers.filter(it => it.id !== player.id)   \n        player.isFree = true\n        setAllPlayers([..._players, player ])\n      } \n    }\n  }\n\n  return <div id =\"app\" className=\"grid\">\n    <header>Jababira</header>\n    <section id=\"sidebar\">\n      {data?.players && <PlayerList showPlayer={setPlayer} players={allPlayers} togglePlayer={togglePlayer} ></PlayerList>}\n    </section>\n    <section id=\"main\">\n      {showControls && <div id=\"main-controls\">\n        <button onClick={() => createPlayer()}>New Player</button>\n        <button onClick={() => createMatch()}>New Match</button>\n        <button onClick={() => makeTeams()}>Make Teams</button>\n      </div>}\n      <div id=\"main-section\">\n          {isCreatingPlayer && <PlayerEditor existingPlayer={player} onClose={setIsCreatingPlayer}  ></PlayerEditor>}\n          {/* {isMakingTeams && <SquadMaker black={black} white={white}></SquadMaker>} */}\n          {showNewMatch && \n            <Card header=\"New Match\">\n              <MatchMaker positions={positions} allPlayers={allPlayers.filter( it => it.isFree)} setAllPlayers={setAllPlayers} lookupsData={lookups.data}></MatchMaker>\n            </Card> }\n      </div>\n    </section>\n  </div>\n}\n\n","/home/ed/code/jababira/src/components/NewPlayer.tsx",[],"/home/ed/code/jababira/src/generated/types.tsx",[],"/home/ed/code/jababira/src/components/AttributeSelector.tsx",[],"/home/ed/code/jababira/src/setupApollo.ts",[],"/home/ed/code/jababira/src/components/PlayerList.tsx",[],"/home/ed/code/jababira/src/models/Player.ts",[],"/home/ed/code/jababira/src/components/SquadMaker.tsx",["73","74"],"/home/ed/code/jababira/src/components/Team.tsx",[],["75","76"],"/home/ed/code/jababira/src/components/MatchMaker.tsx",["77","78"],"import React, { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { PlayerFull } from \"../App\";\nimport { GetLookupsQuery, Match, MatchType, Position, Squad, VenueType } from \"../generated/types\"\nimport './MatchMaker.css'\nimport { PlayerPicker } from \"./PlayerPicker\";\nimport { SquadMaker } from \"./SquadMaker\";\n\ninterface Props {\n    lookupsData:GetLookupsQuery|undefined\n    allPlayers:Array<PlayerFull>\n    setAllPlayers:Dispatch<SetStateAction<Array<PlayerFull>>>\n    positions:Array<Position>\n}\n\nexport const MatchMaker = ({lookupsData, positions, allPlayers, setAllPlayers}:Props) => {\n    const [match,setMatch]  = useState<Match>({id: '', name: '', location: { id : '', name: '', address: '', type: VenueType.Indoor  }, type: MatchType.Casual, squads: []  });\n    const [squads, setSquads] = useState<Array<Squad>>([]) \n    const [playerBeingDragged, setPlayerBeingDragged] = useState<PlayerFull>();\n\n    useEffect(() => {\n        console.log(squads)\n    }, [squads])\n\n    const handleNumberOfSquads = (rawValue:String) => {\n        const value = Number(rawValue)  \n        if (isNaN(value)) {\n            setSquads([])\n        } else {\n            const newSquads:Array<Squad> = []  \n            for (let i =0; i<value;i++) {\n                newSquads.push({id: (i+1)+'', name:''})\n                setSquads(newSquads)\n            }\n        }\n    }  \n    const setSquad = (index:number) => {\n        return (squad:Squad) => {\n            const oldSquad = squads[index]; \n            const _squads = squads.filter(it => it !== oldSquad )   \n            setSquads([..._squads,squad].sort((a,b) => a.id < b.id ? -1 : 1 ))\n        }  \n    }\n\n\n\n    return <div id=\"match-maker\" className=\"grid\">\n        <label>Venue</label>\n        <select onChange={it => null }>\n          {lookupsData?.lookups?.venues?.map(venue => <option value={venue.name}>{venue.name}</option>)}\n        </select>\n        <label>Date</label>\n        <input type=\"date\"/>\n        <label>Time</label>\n        <input type=\"time\"/>\n        <label>Type</label>\n        <select onChange={it => null }>\n          {[MatchType.Casual, MatchType.Friendly, MatchType.League].map(matchType => <option value={matchType}>{matchType}</option>)}\n        </select>\n        <label>Number of Squads</label>\n        <select onChange={it => handleNumberOfSquads(it.target.value)  }>\n            <option value={undefined}>Select</option>\n            {[2,3].map(it =>  <option value={it}>{it}</option>)}\n        </select>\n        {squads.length && <div id=\"squads\" className=\"flex\">\n            {squads.map((squad,index) => <SquadMaker setAllPlayers={setAllPlayers} playerBeingDragged={playerBeingDragged} setPlayerBeingDragged={setPlayerBeingDragged} positions={positions} allPlayers={allPlayers} setSquad={setSquad(index)} squad={squad}></SquadMaker> )}\n            <PlayerPicker setPlayerBeingDragged={setPlayerBeingDragged} allPlayers={allPlayers}></PlayerPicker>\n        </div>}\n    </div>\n}\n  ","/home/ed/code/jababira/src/components/Card.tsx",[],"/home/ed/code/jababira/src/components/PlayerPicker.tsx",["79","80","81","82"],"import { Dispatch, SetStateAction } from 'react'\nimport { PlayerFull } from '../App'\nimport { Player, Position, Squad, SquadPlayer } from '../generated/types'\nimport './PlayerPicker.css'\n\ninterface Props {\n    allPlayers:Array<PlayerFull>\n    setPlayerBeingDragged:Dispatch<SetStateAction<PlayerFull|undefined>>;\n    // squad:Squad\n    // setSquad:(squad:Squad) => void\n    // positions:Array<Position>\n}\n\nexport const PlayerPicker = ({allPlayers, setPlayerBeingDragged}:Props) => {\n\n    return <div className=\"player-picker\">\n        <ul>\n            {allPlayers.map(player => <li className=\"squad-player-option\" key={'player-'+player.id}><span onDragStart={e => setPlayerBeingDragged(player)} draggable=\"true\">{player.firstName + ' ' + player.lastName}</span></li> )}\n        </ul>\n    </div>\n\n}","/home/ed/code/jababira/src/components/Slider.tsx",[],{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"83","replacedBy":"84"},{"ruleId":"85","replacedBy":"86"},{"ruleId":"87","severity":1,"message":"88","line":15,"column":10,"nodeType":"89","messageId":"90","endLine":15,"endColumn":23},{"ruleId":"91","severity":1,"message":"92","line":91,"column":20,"nodeType":"93","messageId":"94","endLine":91,"endColumn":22},{"ruleId":"91","severity":1,"message":"92","line":137,"column":20,"nodeType":"93","messageId":"94","endLine":137,"endColumn":22},{"ruleId":"83","replacedBy":"95"},{"ruleId":"85","replacedBy":"96"},{"ruleId":"87","severity":1,"message":"97","line":16,"column":12,"nodeType":"89","messageId":"90","endLine":16,"endColumn":17},{"ruleId":"87","severity":1,"message":"98","line":16,"column":18,"nodeType":"89","messageId":"90","endLine":16,"endColumn":26},{"ruleId":"87","severity":1,"message":"99","line":3,"column":10,"nodeType":"89","messageId":"90","endLine":3,"endColumn":16},{"ruleId":"87","severity":1,"message":"100","line":3,"column":18,"nodeType":"89","messageId":"90","endLine":3,"endColumn":26},{"ruleId":"87","severity":1,"message":"101","line":3,"column":28,"nodeType":"89","messageId":"90","endLine":3,"endColumn":33},{"ruleId":"87","severity":1,"message":"102","line":3,"column":35,"nodeType":"89","messageId":"90","endLine":3,"endColumn":46},"no-native-reassign",["103"],"no-negated-in-lhs",["104"],"@typescript-eslint/no-unused-vars","'isMakingTeams' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["103"],["104"],"'match' is assigned a value but never used.","'setMatch' is assigned a value but never used.","'Player' is defined but never used.","'Position' is defined but never used.","'Squad' is defined but never used.","'SquadPlayer' is defined but never used.","no-global-assign","no-unsafe-negation"]
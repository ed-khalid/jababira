[{"/home/ed/code/jababira/src/index.tsx":"1","/home/ed/code/jababira/src/reportWebVitals.js":"2","/home/ed/code/jababira/src/App.tsx":"3","/home/ed/code/jababira/src/components/NewPlayer.tsx":"4","/home/ed/code/jababira/src/generated/types.tsx":"5","/home/ed/code/jababira/src/components/AttributeSelector.tsx":"6","/home/ed/code/jababira/src/setupApollo.ts":"7","/home/ed/code/jababira/src/components/PlayerList.tsx":"8","/home/ed/code/jababira/src/models/Player.ts":"9","/home/ed/code/jababira/src/components/SquadMaker.tsx":"10","/home/ed/code/jababira/src/components/Team.tsx":"11","/home/ed/code/jababira/src/components/PlayerPicker.tsx":"12","/home/ed/code/jababira/src/components/MatchMaker/MatchMaker.tsx":"13","/home/ed/code/jababira/src/components/MatchMaker/MatchMakerCard.tsx":"14","/home/ed/code/jababira/src/components/Common/Card.tsx":"15","/home/ed/code/jababira/src/components/Common/Dropzone.tsx":"16","/home/ed/code/jababira/src/components/Common/Slider.tsx":"17","/home/ed/code/jababira/src/models/mappers.ts":"18","/home/ed/code/jababira/src/components/Misc/Error.tsx":"19","/home/ed/code/jababira/src/components/Admin/AdminPage.tsx":"20","/home/ed/code/jababira/src/components/Admin/PlayerManager.tsx":"21","/home/ed/code/jababira/src/components/Common/SortableColumn.tsx":"22"},{"size":1236,"mtime":1664685848724,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1611081720670,"results":"25","hashOfConfig":"24"},{"size":3408,"mtime":1664685528834,"results":"26","hashOfConfig":"24"},{"size":5195,"mtime":1613298410563,"results":"27","hashOfConfig":"24"},{"size":12765,"mtime":1613298353915,"results":"28","hashOfConfig":"24"},{"size":642,"mtime":1611187300536,"results":"29","hashOfConfig":"24"},{"size":564,"mtime":1611155506901,"results":"30","hashOfConfig":"24"},{"size":654,"mtime":1611201192059,"results":"31","hashOfConfig":"24"},{"size":169,"mtime":1613288737480,"results":"32","hashOfConfig":"24"},{"size":7021,"mtime":1613349204735,"results":"33","hashOfConfig":"24"},{"size":1556,"mtime":1611200504812,"results":"34","hashOfConfig":"35"},{"size":797,"mtime":1613024936827,"results":"36","hashOfConfig":"24"},{"size":2942,"mtime":1613364286407,"results":"37","hashOfConfig":"24"},{"size":3314,"mtime":1613350124663,"results":"38","hashOfConfig":"24"},{"size":435,"mtime":1613298614487,"results":"39","hashOfConfig":"24"},{"size":681,"mtime":1613298617531,"results":"40","hashOfConfig":"24"},{"size":436,"mtime":1613298622097,"results":"41","hashOfConfig":"24"},{"size":692,"mtime":1613301212733,"results":"42","hashOfConfig":"24"},{"size":364,"mtime":1664685276516,"results":"43","hashOfConfig":"24"},{"size":451,"mtime":1664685965979,"results":"44","hashOfConfig":"24"},{"size":3271,"mtime":1664773402657,"results":"45","hashOfConfig":"24"},{"size":1597,"mtime":1664773248110,"results":"46","hashOfConfig":"24"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},"1yr0qv7",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"49"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"ktdsvd",{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"49"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"49"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"49"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"49"},"/home/ed/code/jababira/src/index.tsx",[],["99","100"],"/home/ed/code/jababira/src/reportWebVitals.js",[],["101","102"],"/home/ed/code/jababira/src/App.tsx",["103"],"import './App.css';\nimport { useEffect, useState } from 'react';\nimport { PlayerEditor } from './components/NewPlayer';\nimport { Player, Position, useGetLookupsQuery, useGetPlayersQuery } from './generated/types';\nimport { PlayerList } from './components/PlayerList';\nimport { MatchMaker } from './components/MatchMaker/MatchMaker';\n\nexport type PlayerFull = Player & { isFree:boolean }   \n\nexport const App = () => {\n\n  const positions = [Position.Gk, Position.Def, Position.Mid, Position.Fw] \n  const [isCreatingPlayer, setIsCreatingPlayer] = useState<boolean>(false);\n  const [isMakingTeams, setIsMakingTeams] = useState<boolean>(false);\n  const [showControls, setShowControls] = useState<boolean>(true);\n  const [showNewMatch, setShowNewMatch] = useState<boolean>(false);\n  const [black, setBlack] = useState<Array<Player>>([])\n  const [white, setWhite] = useState<Array<Player>>([])\n  const [player, setPlayer] = useState<Player>();\n  const [allPlayers, setAllPlayers] = useState<Array<PlayerFull>>([])\n  const lookups = useGetLookupsQuery()   \n  const { data } = useGetPlayersQuery() \n  \n  useEffect(() => {\n    if (data && data.players) {\n      const players:Array<PlayerFull> = data.players.map( it => ({...it, isFree:true}))   \n      setAllPlayers(players)\n    }\n  }, [data])\n\n  useEffect(() => {\n    if (player) {\n      setIsCreatingPlayer(true)\n    }\n\n  }, [player])\n\n  const createPlayer = () => {\n    setIsCreatingPlayer(true)\n    setShowControls(false)\n  } \n  const makeTeams =  () => {\n    setIsMakingTeams(true)\n    setShowControls(false)\n  }\n\n  const createMatch = () => {\n    setShowNewMatch(true)\n  } \n\n  const togglePlayer =  (player:PlayerFull) => {\n    if (data && data.players) {\n      const isInBlack = black.find(it => it.id === player.id)  \n      const isInWhite = white.find(it => it.id === player.id)  \n      if (!isInBlack && !isInWhite) {\n        setBlack([...black, player])\n        const _players = allPlayers.filter(it => it.id !== player.id)   \n        player.isFree = false\n        setAllPlayers([..._players, player ])\n      }\n      else if (isInBlack) {\n        setBlack(black.filter(it => it.id !== player.id))\n        setWhite([...white, player])\n      } else {\n        setWhite(white.filter(it => it.id !== player.id))\n        const _players = allPlayers.filter(it => it.id !== player.id)   \n        player.isFree = true\n        setAllPlayers([..._players, player ])\n      } \n    }\n  }\n\n\n  return <div id =\"app\" className=\"grid\">\n    <header>Jababira</header>\n    <section id=\"sidebar\">\n      {data?.players && <PlayerList showPlayer={setPlayer} players={allPlayers} togglePlayer={togglePlayer} ></PlayerList>}\n    </section>\n    <section id=\"main\">\n      {showControls && <div id=\"main-controls\">\n        <button onClick={() => createPlayer()}>New Player</button>\n        <button onClick={() => createMatch()}>New Match</button>\n        <button onClick={() => makeTeams()}>Make Teams</button>\n      </div>}\n      <div id=\"main-section\">\n          {isCreatingPlayer && <PlayerEditor existingPlayer={player} onClose={setIsCreatingPlayer}  ></PlayerEditor>}\n          {/* {isMakingTeams && <SquadMaker black={black} white={white}></SquadMaker>} */}\n          {showNewMatch && \n            <MatchMaker positions={positions} allPlayers={allPlayers} setAllPlayers={setAllPlayers} lookupsData={lookups.data}></MatchMaker>\n          }\n      </div>\n    </section>\n  </div>\n}\n\n","/home/ed/code/jababira/src/components/NewPlayer.tsx",[],"/home/ed/code/jababira/src/generated/types.tsx",[],"/home/ed/code/jababira/src/components/AttributeSelector.tsx",[],"/home/ed/code/jababira/src/setupApollo.ts",[],"/home/ed/code/jababira/src/components/PlayerList.tsx",[],"/home/ed/code/jababira/src/models/Player.ts",[],"/home/ed/code/jababira/src/components/SquadMaker.tsx",[],"/home/ed/code/jababira/src/components/Team.tsx",[],["104","105"],"/home/ed/code/jababira/src/components/PlayerPicker.tsx",["106","107","108","109"],"import { Dispatch, SetStateAction } from 'react'\nimport { PlayerFull } from '../App'\nimport { Player, Position, Squad, SquadPlayer } from '../generated/types'\nimport './PlayerPicker.css'\n\ninterface Props {\n    allPlayers:Array<PlayerFull>\n    setPlayerBeingDragged:Dispatch<SetStateAction<PlayerFull|undefined>>;\n    // squad:Squad\n    // setSquad:(squad:Squad) => void\n    // positions:Array<Position>\n}\n\nexport const PlayerPicker = ({allPlayers, setPlayerBeingDragged}:Props) => {\n\n    return <div className=\"player-picker\">\n        <ul>\n            {allPlayers.map(player => <li className=\"squad-player-option\" key={'player-'+player.id}><span onDragStart={e => setPlayerBeingDragged(player)} draggable=\"true\">{player.firstName + ' ' + player.lastName}</span></li> )}\n        </ul>\n    </div>\n\n}","/home/ed/code/jababira/src/components/MatchMaker/MatchMaker.tsx",["110","111","112"],"import { lookupService } from \"dns\"\nimport React, { Dispatch, SetStateAction, useEffect, useState } from \"react\"\nimport { PlayerFull } from \"../../App\"\nimport { GetLookupsQuery, Match, MatchType, Position, useCreateMatchMutation, VenueType } from \"../../generated/types\"\nimport { mapSquadToSquadInput } from \"../../models/mappers\"\nimport { Card } from \"../Common/Card\"\nimport { MatchMakerCard } from \"./MatchMakerCard\"\n\ninterface Props {\n    positions:Array<Position>,\n    allPlayers:Array<PlayerFull>\n    setAllPlayers:Dispatch<SetStateAction<Array<PlayerFull>>>\n    lookupsData:GetLookupsQuery|undefined\n} \n\nexport const MatchMaker = ({positions, allPlayers, setAllPlayers, lookupsData}:Props)  => {\n        const [match,setMatch]  = useState<Match>({id: '', date:'', time:'', location: { id : '', name: '', address: '', type: VenueType.Indoor  }, type: MatchType.Casual, squads: []  });\n        const matchTypes = [MatchType.Casual, MatchType.Friendly, MatchType.League] \n        const [createMatch, createMatchResults] = useCreateMatchMutation()\n\n        const saveMatch = () => {\n            const newMatch = {\n                date: match.date,\n                time: match.time,\n                type: match.type,\n                venueId: match.location.id,\n                squads: match.squads.map(mapSquadToSquadInput)\n            }  \n            debugger\n            createMatch({variables: { match: newMatch}}).then(succ => {}, err => {\n                console.log(err)\n            } )\n        }\n        const updateMatch = (key:keyof Match, value:Match[keyof Match]) => {\n            if (key === 'location') {\n                const newLocation = lookupsData?.lookups.venues.find( it => it.id === value)   \n                if (newLocation) {\n                  setMatch({...match, ...{[key]: newLocation }})\n                }\n            } \n            else if (key === 'type') {\n                const newType = matchTypes.find(it => it.toString() === value) \n                if (newType) {\n                    setMatch({...match,...{[key]: newType}})\n                }\n            }\n            \n            else {\n                const newMatch = {...match, ...{[key]: value}}\n                setMatch({...newMatch})\n            }\n        } \n        const cancelMatch =  () => {\n\n        }\n\n        return <React.Fragment>\n            <Card header=\"New Match\">\n                <MatchMakerCard \n                   match = {match}\n                   updateMatch={updateMatch}\n                   positions={positions} \n                   allPlayers={allPlayers.filter( it => it.isFree)} \n                   setAllPlayers={setAllPlayers} \n                   lookupsData={lookupsData}\n                />\n            </Card> \n            <div className=\"actions\">\n            <button onClick={() => saveMatch()}>Save</button>\n            <button onClick={() => cancelMatch()}>Cancel</button>\n            </div>\n        </React.Fragment>\n} ","/home/ed/code/jababira/src/components/MatchMaker/MatchMakerCard.tsx",["113","114"],"import React, { Dispatch, SetStateAction, useEffect, useState } from \"react\";\nimport { PlayerFull } from \"../../App\";\nimport { GetLookupsQuery, Match, MatchType, Position, Squad, VenueType } from \"../../generated/types\"\nimport './MatchMakerCard.css'\nimport { PlayerPicker } from \"../PlayerPicker\";\nimport { SquadMaker } from \"../SquadMaker\";\n\ninterface Props {\n    match:Match\n    lookupsData:GetLookupsQuery|undefined\n    allPlayers:Array<PlayerFull>\n    setAllPlayers:Dispatch<SetStateAction<Array<PlayerFull>>>\n    updateMatch:(key:keyof Match, value:any) => void\n    positions:Array<Position>\n}\n\nexport const MatchMakerCard = ({match, updateMatch, lookupsData, positions, allPlayers, setAllPlayers}:Props) => {\n    const [playerBeingDragged, setPlayerBeingDragged] = useState<PlayerFull>();\n\n    const handleNumberOfSquads = (rawValue:String) => {\n        const value = Number(rawValue)  \n        if (isNaN(value)) {\n            updateMatch('squads',[])\n        } else {\n            const newSquads:Array<Squad> = []  \n            for (let i =0; i<value;i++) {\n                newSquads.push({id: (i+1)+'', name:'', isJababiraSquad: false})\n                updateMatch('squads',newSquads)\n            }\n        }\n    }  \n    const setSquad = (index:number) => {\n        return (squad:Squad) => {\n            const oldSquad = match.squads[index]; \n            const _squads = match.squads.filter(it => it !== oldSquad )   \n            updateMatch( 'squads',[..._squads,squad].sort((a,b) => a.id < b.id ? -1 : 1 ))\n        }  \n    }\n\n\n\n    return <div id=\"match-maker\" className=\"grid\">\n        <label>Venue</label>\n        <select value={match.location.id} onChange={it => updateMatch('location', it.target.value) }>\n          <option value={undefined}>Select</option>\n          {lookupsData?.lookups?.venues?.map(venue => <option key={'venue-'+venue.id} value={venue.id}>{venue.name}</option>)}\n        </select>\n        <label>Date</label>\n        <input value={match.date} onChange={it => updateMatch('date', it.target.value) } type=\"date\"/>\n        <label>Time</label>\n        <input value={match.time} onChange={it => updateMatch('time', it.target.value)}type=\"time\"/>\n        <label >Type</label>\n        <select value={match.type} onChange={it => updateMatch('type', it.target.value) }>\n          <option value={undefined}>Select</option>\n          {[MatchType.Casual, MatchType.Friendly, MatchType.League].map(matchType => <option key={'match-type-' + matchType.toLowerCase()} value={matchType}>{matchType}</option>)}\n        </select>\n        <label>Number of Squads</label>\n        <select onChange={it => handleNumberOfSquads(it.target.value)  }>\n            <option value={undefined}>Select</option>\n            {[2,3].map(it =>  <option key={'squad-choice-' + it} value={it}>{it}</option>)}\n        </select>\n        {match.squads.length && <div id=\"squads\" className=\"flex\">\n            {match.squads.map((squad,index) => <SquadMaker setAllPlayers={setAllPlayers} playerBeingDragged={playerBeingDragged} setPlayerBeingDragged={setPlayerBeingDragged} positions={positions} allPlayers={allPlayers} setSquad={setSquad(index)} squad={squad}></SquadMaker> )}\n            <PlayerPicker setPlayerBeingDragged={setPlayerBeingDragged} allPlayers={allPlayers}></PlayerPicker>\n        </div>}\n    </div>\n}\n  ","/home/ed/code/jababira/src/components/Common/Card.tsx",[],"/home/ed/code/jababira/src/components/Common/Dropzone.tsx",[],"/home/ed/code/jababira/src/components/Common/Slider.tsx",[],"/home/ed/code/jababira/src/models/mappers.ts",[],"/home/ed/code/jababira/src/components/Misc/Error.tsx",[],"/home/ed/code/jababira/src/components/Admin/AdminPage.tsx",[],"/home/ed/code/jababira/src/components/Admin/PlayerManager.tsx",["115","116"],"/home/ed/code/jababira/src/components/Common/SortableColumn.tsx",["117","118","119"],"import { useState } from \"react\"\n\n\nexport interface Props {\n    name:string\n    property:string\n    collection:any[]\n    output:any\n}\n\n\nenum SortDirection {\n    ASCENDING, DESCENDING\n} \n\nexport const SortableColumn = ({name,property,collection, output}:Props) => {\n\n    const [sortDirection, setSortDirection] = useState<SortDirection>(SortDirection.ASCENDING)   \n\n\n    const sort = ()  => {\n        const newCollection = [...collection] \n        newCollection.sort((a,b) => {\n\n            let aVal = a[property]  \n            let bVal = b[property]  \n\n            if (property.includes(\".\")) {\n                const props = property.split(\".\")\n                const parentProp = props[0]   \n                const childProp = props[1]   \n                aVal = a[parentProp][childProp] \n                bVal = b[parentProp][childProp] \n            }\n\n            if (aVal < bVal) {\n                if (sortDirection == SortDirection.DESCENDING) {\n                  return -1;\n                } else {\n                    return 1;\n                }\n            }\n            if (aVal > bVal) {\n                if (sortDirection == SortDirection.DESCENDING) {\n                  return 1;\n                } else {\n                    return -1;\n                }\n            }\n            return 0;\n        })\n        const newSortDirection = sortDirection == SortDirection.ASCENDING ? SortDirection.DESCENDING : SortDirection.ASCENDING; \n        setSortDirection(newSortDirection)\n        output(newCollection)\n    }  \n\n\n\n    return (<th>\n        <div onClick={()=>sort()}>{name}</div>\n    </th>)\n}",{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"120","replacedBy":"121"},{"ruleId":"122","replacedBy":"123"},{"ruleId":"124","severity":1,"message":"125","line":14,"column":10,"nodeType":"126","messageId":"127","endLine":14,"endColumn":23},{"ruleId":"120","replacedBy":"128"},{"ruleId":"122","replacedBy":"129"},{"ruleId":"124","severity":1,"message":"130","line":3,"column":10,"nodeType":"126","messageId":"127","endLine":3,"endColumn":16},{"ruleId":"124","severity":1,"message":"131","line":3,"column":18,"nodeType":"126","messageId":"127","endLine":3,"endColumn":26},{"ruleId":"124","severity":1,"message":"132","line":3,"column":28,"nodeType":"126","messageId":"127","endLine":3,"endColumn":33},{"ruleId":"124","severity":1,"message":"133","line":3,"column":35,"nodeType":"126","messageId":"127","endLine":3,"endColumn":46},{"ruleId":"124","severity":1,"message":"134","line":1,"column":10,"nodeType":"126","messageId":"127","endLine":1,"endColumn":23},{"ruleId":"124","severity":1,"message":"135","line":2,"column":43,"nodeType":"126","messageId":"127","endLine":2,"endColumn":52},{"ruleId":"124","severity":1,"message":"136","line":19,"column":29,"nodeType":"126","messageId":"127","endLine":19,"endColumn":47},{"ruleId":"124","severity":1,"message":"135","line":1,"column":43,"nodeType":"126","messageId":"127","endLine":1,"endColumn":52},{"ruleId":"124","severity":1,"message":"137","line":3,"column":62,"nodeType":"126","messageId":"127","endLine":3,"endColumn":71},{"ruleId":"138","severity":1,"message":"139","line":39,"column":47,"nodeType":"140","endLine":39,"endColumn":75},{"ruleId":"138","severity":1,"message":"139","line":39,"column":78,"nodeType":"140","endLine":39,"endColumn":127},{"ruleId":"141","severity":1,"message":"142","line":25,"column":35,"nodeType":"143","messageId":"144","endLine":25,"endColumn":37},{"ruleId":"141","severity":1,"message":"142","line":32,"column":35,"nodeType":"143","messageId":"144","endLine":32,"endColumn":37},{"ruleId":"141","severity":1,"message":"142","line":40,"column":48,"nodeType":"143","messageId":"144","endLine":40,"endColumn":50},"no-native-reassign",["145"],"no-negated-in-lhs",["146"],"@typescript-eslint/no-unused-vars","'isMakingTeams' is assigned a value but never used.","Identifier","unusedVar",["145"],["146"],"'Player' is defined but never used.","'Position' is defined but never used.","'Squad' is defined but never used.","'SquadPlayer' is defined but never used.","'lookupService' is defined but never used.","'useEffect' is defined but never used.","'createMatchResults' is assigned a value but never used.","'VenueType' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation"]